# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Grade(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, grade_id: str=None, assignment_id: str=None, student_id: str=None, value: int=None, complete: bool=None):  # noqa: E501
        """Grade - a model defined in Swagger

        :param grade_id: The grade_id of this Grade.  # noqa: E501
        :type grade_id: str
        :param assignment_id: The assignment_id of this Grade.  # noqa: E501
        :type assignment_id: str
        :param student_id: The student_id of this Grade.  # noqa: E501
        :type student_id: str
        :param value: The value of this Grade.  # noqa: E501
        :type value: int
        :param complete: The complete of this Grade.  # noqa: E501
        :type complete: bool
        """
        self.swagger_types = {
            'grade_id': str,
            'assignment_id': str,
            'student_id': str,
            'value': int,
            'complete': bool
        }

        self.attribute_map = {
            'grade_id': 'gradeId',
            'assignment_id': 'assignmentId',
            'student_id': 'studentId',
            'value': 'value',
            'complete': 'complete'
        }
        self._grade_id = grade_id
        self._assignment_id = assignment_id
        self._student_id = student_id
        self._value = value
        self._complete = complete

    @classmethod
    def from_dict(cls, dikt) -> 'Grade':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Grade of this Grade.  # noqa: E501
        :rtype: Grade
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grade_id(self) -> str:
        """Gets the grade_id of this Grade.


        :return: The grade_id of this Grade.
        :rtype: str
        """
        return self._grade_id

    @grade_id.setter
    def grade_id(self, grade_id: str):
        """Sets the grade_id of this Grade.


        :param grade_id: The grade_id of this Grade.
        :type grade_id: str
        """

        self._grade_id = grade_id

    @property
    def assignment_id(self) -> str:
        """Gets the assignment_id of this Grade.


        :return: The assignment_id of this Grade.
        :rtype: str
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id: str):
        """Sets the assignment_id of this Grade.


        :param assignment_id: The assignment_id of this Grade.
        :type assignment_id: str
        """

        self._assignment_id = assignment_id

    @property
    def student_id(self) -> str:
        """Gets the student_id of this Grade.


        :return: The student_id of this Grade.
        :rtype: str
        """
        return self._student_id

    @student_id.setter
    def student_id(self, student_id: str):
        """Sets the student_id of this Grade.


        :param student_id: The student_id of this Grade.
        :type student_id: str
        """

        self._student_id = student_id

    @property
    def value(self) -> int:
        """Gets the value of this Grade.


        :return: The value of this Grade.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value: int):
        """Sets the value of this Grade.


        :param value: The value of this Grade.
        :type value: int
        """

        self._value = value

    @property
    def complete(self) -> bool:
        """Gets the complete of this Grade.


        :return: The complete of this Grade.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete: bool):
        """Sets the complete of this Grade.


        :param complete: The complete of this Grade.
        :type complete: bool
        """

        self._complete = complete
